<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>pom-demo001</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <spring.version>5.2.12.RELEASE</spring.version>
        <junit.version>4.13.1</junit.version>
    </properties>

    <dependencies>
        <!--
        <dependency>
            <groupId>org.jcm</groupId>
            <artifactId>starter-lock</artifactId>
            <version>0.0.3-SNAPSHOT</version>
        </dependency>
        -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <!--
        maven依赖搜索顺序
        1.在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。
        2.在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 3，如果找到了则下载到本地仓库中以备将来引用。
        3.在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。
        ps:如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。
        ps:仓库标签可以放在<profile>下使用更加灵活
    <repositories>
        <repository>
            <id>aliyun</id>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
        </repository>
        <repository>
            <id>companyname.lib2</id>
            <url>http://download.companyname.org/maven2/lib5</url>
        </repository>
    </repositories>
    -->

    <!--
        定义好当前的环境,采用不通的激活方式操作
            1.使用命令行:mvn test -Ptest
                第一个 test 为 Maven 生命周期阶段，第 2 个 test 为构建配置文件指定的 <id> 参数，这个参数通过 -P 来传输，当然，它可以是 prod 或者 normal 这些由你定义的<id>。
            2.通过maven安装目录conf下的setting文件配置激活,增加<activeProfiles>
                1.settings增加<activeProfiles>
                    <activeProfiles>
                      <activeProfile>test</activeProfile>
                    </activeProfiles>
                2.执行命令: mvn test
            3.通过环境变量激活配置文件,执行命令: mvn test -Denv=test
                1.pom里<profile>节点加入<activation>
                    <activation>
                        <property>
                            <name>env</name>
                            <value>test</value>
                        </property>
                    </activation>
                    也可以在加上<activeByDefault>true</activeByDefault>,表示默认激活
                2.执行命令: mvn test -Denv=test
            4.通过操作系统激活配置文件
            5.通过文件的存在或者缺失激活配置文件
                1.加入
                    <profile>
                       <id>test</id>
                       <activation>
                          <file>
                             <missing>target/generated-sources/axistools/wsdl2java/
                             com/companyname/group</missing>
                          </file>
                       </activation>
                    </profile>
                 2.执行命令: mvn test
    -->
    <!--
    <profiles>
        <profile>
            <id>test</id>
            <repositories>
                <repository>
                    <id>aliyun</id>
                    <url>http://maven.aliyun.com/nexus/content/groups/public</url>
                </repository>
            </repositories>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>env</name>
                    <value>test</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <echo>Using env.test.properties</echo>
                                        <copy file="src/main/resources/env.test.properties"
                                              tofile="${project.build.outputDirectory}/env.properties"
                                              overwrite="true"/>
                                    </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>normal</id>
            <repositories>
                <repository>
                    <id>companyname.lib2</id>
                    <url>http://download.companyname.org/maven2/lib5</url>
                </repository>
            </repositories>
            <activation>
                <property>
                    <name>env</name>
                    <value>normal</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <echo>Using env.properties</echo>
                                        <copy file="src/main/resources/env.properties"
                                              tofile="${project.build.outputDirectory}/env.properties"
                                              overwrite="true"/>
                                    </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>prod</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <echo>Using env.prod.properties</echo>
                                        <copy file="src/main/resources/env.prod.properties"
                                              tofile="${project.build.outputDirectory}/env.properties"
                                              overwrite="true"/>
                                    </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    -->

    <!--
        build 使用
        插件是在 pom.xml 中使用 plugins 元素定义的。
        每个插件可以有多个目标。
        你可以定义阶段，插件会使用它的 phase 元素开始处理。我们已经使用了 clean 阶段。
        你可以通过绑定到插件的目标的方式来配置要执行的任务。我们已经绑定了 echo 任务到 maven-antrun-plugin 的 run 目标。
        就是这样，Maven 将处理剩下的事情。它将下载本地仓库中获取不到的插件，并开始处理。
        ps:可以放在<profile>下使用更加灵活
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.1</version>
                <executions>
                    <execution>
                        <id>id.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <echo>clean phase</echo>
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    -->


</project>